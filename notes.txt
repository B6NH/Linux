
Part 1

------------------------------------------------------

Chapter 1 - What Is the Shell?

date - display date
cal - calendar application
df - display free space on disk drives
free - display free memory
exit - end terminal session
Ctrl-Alt-Fx - access terminal session

Selected text is automatically copied.
Press middle mouse button to paste it.

------------------------------------------------------

Chapter 2 - Navigation

pwd - display current working directory
cd - change directory(absolute or relative pathname)
ls - display directory contents
'ls -a, --all' - do not ignore entries starting with '.'
. - working directory
.. - upper directory

For unspecified paths, working directory is assumed.
Shortcuts:
  'cd' - home directory
  'cd -' - previous working directory
  'cd ~username' - user home directory

------------------------------------------------------

Chapter 3 - Exploring the System

file - display file type
less - display file contents
'ls ~ /usr' - list many directories

File information:
  -rw-r--r-- 1 root root 3576296 2017-04-03 11:05 Experience ubuntu.ogg

Access rights(owner, group, everyone):
  leading
    dash - regular file
    d - directory
    l - symbolic link
    c - character special file
    b - block special file
Number of hard links, Owner, Group, Size, Modification time, File name

Commands can take different options, for example: 'ls -lt --reverse'.
This results in long format output sorted by file modification date in reverse order.
There are also other options available for ls command.
Double click on file to copy its name.
Linux operating system contains many typical directories.
Symbolic links allow to have a file referenced by multiple names.

------------------------------------------------------

Chapter 4 - Manipulating Files and Directories

cp - copy files/directories
mv - move and rename files/directories
mkdir - create directory
rm - remove files/directories
ln - create links(hard/symbolic)

Wildcards allow to select filenames based on patterns.
Hard link is indistinguishable from file itself.
File is deleted when all hard links are deleted.
If file referred to by symbolic link is deleted, link will be broken.
Use ls with '-i' option to display inode number.
Hard links can only be used with files.
Use ln with '-s' option to create symbolic link.
Leading l indicates symbolic link.
Path to file is relative to path of symbolic link.

------------------------------------------------------

Chapter 5 - Working with Commands

type - display command type(shell builtin, executable program, shell function, alias)
which - display executable location
help - help for shell builtins
man - display manual page(manual section can be specified)
apropos - search man pages by keyword(same as 'man -k')
whatis - display one-line manual page descriptions
info - GNU Project alternative to man pages
alias - create command alias

Commands can be separated by semicolons.

------------------------------------------------------

Chapter 6 - Redirection

> - redirect standard output
>> - redirect and append output
2> - redirect error with file descriptor
0, 1, 2 - file descriptors for input, output and error
cat - read and copy file to output
'cat movie.mpeg.0* > movie.mpeg' - join files
'cat > lazy_dog.txt' - write to text file
| - pass output of one command to input of another(pipeline)
'ls /bin /usr/bin | sort | less' - sort command output and display it with less
uniq - remove or display(-d) duplicates
wc - display number of lines, words and bytes
grep - find text patterns
head/tail - display beginning or end of file(10 lines)
'ls /usr/bin | tail -n 5' - last 5 lines
'tail -f /var/log/messages' - view file in real time
tee - read standard input and copy it to standard output and file(s)
'ls /usr/bin | tee ls.txt | grep zip' - pass output to file and grep

Output and error can be redirected to 1 file:
  'ls -l /bin/usr > ls-output.txt 2>&1' - redirect output to file and error to output
  'ls -l /bin/usr &> ls-output.txt' - newer method

Both methods can be used with append notation.
Output can be redirected to "/dev/null".
Commands used with pipeline operator are called filters.

------------------------------------------------------

Chapter 7 - Seeing the World as the Shell Sees It

echo - display text
'echo *' - display filenames
'echo $(((5**2) * 3))' - arithmetic expression
'echo file_{1..5}' - brace expansion
printenv - display available variables
'echo $USER' - display value of USER variable
'ls -l $(which cp)' - expand command(alternatively, backticks can be used)
'echo "text ~/*.txt {a,b} $(echo foo) $((2+2)) $USER"' - suppress expansion
'echo "The balance for user $USER is: \$5.00"' - escaping character
'echo -e "Time's up\a"' - use bell escape sequence('-e' to enable backslash escapes)

Expansion works with paths, tilde, arithmetic expressions.
Brace expansion allows to create multiple strings from pattern.
Parameter expansion makes use of variables.
Expansion can be used with command output.
Quoting selectively suppresses expansion(single/double quotes).
Backslash quotes one character and can be used to represent control codes.

------------------------------------------------------

Chapter 8 - Advanced Keyboard Tricks

clear - clear screen
history - display history
!1596 - history expansion
!! - execute last command
Ctrl-r - incremental search(Enter - execute, Ctrl-j - copy to command line, Ctrl-g/c - quit)
script - record shell session(exit/Ctrl-d to quit)

Readline library allows to edit text on command line.
There are many keyboard shortcuts that can be used to move cursor and modify text.
Pressing tab key while typing activates completion function.
Exclamation mark and line number from history allow quick use of command.
Esc can be used instead of meta key.

------------------------------------------------------

Chapter 9 - Permissions

id - display user identity
  uid - user id
  gid - primary group
chmod - change file mode
'chmod 600 foo.txt' - set file mode to -rw-------(110-000-000)
'chmod +x/a+x' - add execute permission for all
'chmod u+rw' - add read and write permissions for owner
'chmod u+x,go=rx' - add execute permission for owner, set group and world permissions to 'r' and 'x'
umask - set default permissions
'umask 0022' - remove default write permissions for group owner and world(000-000-010-010)
'chmod u+s program' - assign setuid to program(set effective user ID to program owner - program runs with owner privileges)
'chmod g+s dir' - assign setgid to directory(set effective group ID to directory owner - new files will be given group ownership of directory)
'chmod +t dir' - assign sticky bit to directory(prevent users, except file/directory owner and superuser, from deleting or renaming files)
su - run shell as another user('-l/-' - start shell as login shell, '-c' - execute single command)
sudo - execute command as another user
chown - change file owner and group
'chown bob one.txt' - change file owner to bob
'chown bob:users two.txt' - change file owner to bob and group owner to users
'chown :admins three.txt' - change group owner to admins
'chown bob: four.txt' - change file owner to bob and group owner to bob's login group
chgrp - change group ownership(in older versions of Unix)
passwd - change password

User accounts and groups are defined in '/etc/passwd' and '/etc/groups' files, respectively.
File with user password information - '/etc/shadows'.
File mode consists of 9 characters(3 for each type) - owner, group owner, world.
Permission attributes are denoted by letters 'r', 'w' and 'x'(read, write, execute).
Symbolic links have 'dummy' permissions.
File modes can be set using octal number system or symbolic notation.
Linux ignores sticky bit on files.

------------------------------------------------------

Chapter 10 - Processes

------------------------------------------------------

