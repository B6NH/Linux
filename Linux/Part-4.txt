
------------------------------------------------------

Part 4 - Writing Shell Scripts

------------------------------------------------------

Chapter 24 - Writing Your First Script

Shell script starts with shebang.
They should be readable and executable.
Scripts are usually located in 'bin' directory.

------------------------------------------------------

Chapter 25 - Starting a Project

'declare -r TITLE="Page Title"' - constant
'declare -i NUMBER=12' - integer

Variables contain values.
Constants are denoted by uppercase letters.
Text can be output using 'echo' command or here document.

------------------------------------------------------

Chapter 26 - Top-Down Design

Shell functions can be defined in script or '.bashrc' file.
Local variables are visible only inside subroutines.
Global variables exist throughout the program.

------------------------------------------------------

Chapter 27 - Flow Control: Branching with if

Branching is possible with 'if' statement.
Exit status indicates success or failure of command.
The 'test' command appears in two forms.
Logical operators:
  - AND
  - OR
  - NOT
Compound commands:
  modern test - '[[ ]]'
  integers - '(( ))'

------------------------------------------------------

Chapter 28 - Reading Keyboard Input

Data from standard input can be read with 'read' command.
By default, output returned by 'read' is stored in 'REPLY'.
Variable 'IFS' specifies which character is treated as separator.

------------------------------------------------------

Chapter 29 - Flow Control: Looping with while / until

Loops allow to perform actions multiple times.
Two common types of loops are 'while' and 'until'.
The 'continue' function allows programmer to skip rest of loop.
To exit loop one can use 'break' command.

------------------------------------------------------

Chapter 30 - Troubleshooting

The most common syntactic errors are missing parentheses and tokens.
Another type of errors are those related to expansion.
Even if program works, it may contain logical errors.
It is good practice to enclose variables in double quotes.
Testing and debugging helps create robust software.

------------------------------------------------------

Chapter 31 - Flow Control: Branching with case

Compound command 'case' performs action depending on value of variable.
Multiple patterns can be combined with logical operator 'or'.
Placing ';;&' at the end of action will cause next conditions to be checked.

------------------------------------------------------

Chapter 32 - Positional Parameters

Positional parameters store words read from command line.
Variable '$#' contains number of passed arguments.
The 'shift' command moves values of arguments.
Special parameters '*' and '@' expand into lists.

------------------------------------------------------

Chapter 33 - Flow Control: Looping with for

The 'for' loop is available in two versions.
By default, it processes positional parameters.
The C language version of loop can create sequences of numbers.

------------------------------------------------------

Chapter 34 - Strings and Numbers

Various types of parameter expansions are available.
Some of them deal with problem of empty words.
Others return variable names or are used with strings.
They can also perform conversions and arithmetic operations.
Various number bases, bit operations and logical operators are available.
For more advanced mathematical operations, 'bc' program can be used.

------------------------------------------------------

Chapter 35 - Arrays

'declare -a a' - declare array
'echo ${#a[@]}' - number of array elements
'foo+=(d e f)' - add elements at the end of array
'unset arr' - delete array
'declare -A colors' - declare associative array

Arrays are variables that store multiple values.
Their indices start at zero.
Subscripts '@' and '*' return entire contents of array.
They can be processed with loops.

------------------------------------------------------

Chapter 36 - Exotica

'echo "foo" | read' - command runs in subshell
'read < <(echo "foo")' - treat subshell output as normal file
mktemp - create temporary file or directory

Commands can be grouped together with group commands or subshells.
Traps execute commands when signals are detected.
Temporary files should have unpredictable names to avoid temp race attack.
Asynchronous execution can be managed using 'wait' command.
Named pipes are files used to create connections between processes.

------------------------------------------------------

